{"version":3,"sources":["components/Feeling/Feeling.js","components/Understanding/Understanding.js","components/Supported/Supported.js","components/Comments/Comments.js","components/Admin/Admin.js","components/Review/Review.js","components/Confirmation/Confirmation.js","components/App/App.js","registerServiceWorker.js","index.js"],"names":["Feeling","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setFeeling","event","setState","value","target","nextPage","state","action","type","payload","dispatch","history","push","alert","react_default","a","createElement","placeholder","onChange","onClick","Component","connect","Understanding","setUnderstanding","Supported","setSupport","Comments","setComment","comment","enterComment","Admin","Review","complete","location","pathname","handleSubmit","disabled","console","log","assertThisInitialized","feedbackToSend","reduxStore","axios","method","url","data","then","response","catch","error","bind","className","feeling","understanding","supported","comments","Confirmation","newFeedback","App","HashRouter","Redirect","from","to","Route","exact","path","component","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","defaultState","storeInstance","createStore","arguments","length","undefined","objectSpread","applyMiddleware","logger","ReactDOM","render","es","store","components_App_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"kUAGMA,cACF,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMVQ,WAAa,SAACC,GACVR,EAAKS,SAAS,CACVC,MAAOF,EAAMG,OAAOD,SATVV,EAalBY,SAAW,WACP,GAAGZ,EAAKa,MAAMH,OAAS,GAAKV,EAAKa,MAAMH,OAAS,EAAE,CAC9C,IAAMI,EAAS,CAAEC,KAAM,cACvBC,QAAShB,EAAKa,MAAMH,OAEpBV,EAAKD,MAAMkB,SAASH,GACpBd,EAAKD,MAAMmB,QAAQC,KAAK,YAExBC,MAAM,8BAnBVpB,EAAKa,MAAQ,CACTH,OAAQ,GAHEV,wEA0Bd,OACIqB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,2CACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOR,KAAK,SAASS,YAAY,iBAC1BC,SAAUtB,KAAKI,aAC1Bc,EAAAC,EAAAC,cAAA,UAAQG,QAASvB,KAAKS,UAAtB,gBAlCMe,aAwCPC,gBAAU9B,GCxCnB+B,cACF,SAAAA,EAAY9B,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0B,IACd7B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4B,GAAAvB,KAAAH,KAAMJ,KAMV+B,iBAAmB,SAACtB,GAChBR,EAAKS,SAAS,CACVC,MAAOF,EAAMG,OAAOD,SATVV,EAalBY,SAAW,WACP,GAAGZ,EAAKa,MAAMH,OAAS,GAAKV,EAAKa,MAAMH,OAAS,EAAE,CAC9C,IAAMI,EAAS,CAAEC,KAAM,oBACvBC,QAAShB,EAAKa,MAAMH,OAEpBV,EAAKD,MAAMkB,SAASH,GACpBd,EAAKD,MAAMmB,QAAQC,KAAK,YAExBC,MAAM,8BAnBVpB,EAAKa,MAAQ,CACTH,OAAQ,GAHEV,wEA0Bd,OACIqB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,6DACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOR,KAAK,SAASS,YAAY,uBAC1BC,SAAUtB,KAAK2B,mBAC1BT,EAAAC,EAAAC,cAAA,UAAQG,QAASvB,KAAKS,UAAtB,gBAlCYe,aAwCbC,gBAAUC,GCxCnBE,cACF,SAAAA,EAAYhC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA4B,IACd/B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8B,GAAAzB,KAAAH,KAAMJ,KAMViC,WAAa,SAACxB,GACVR,EAAKS,SAAS,CACVC,MAAOF,EAAMG,OAAOD,SATVV,EAalBY,SAAW,WACP,GAAGZ,EAAKa,MAAMH,OAAS,GAAKV,EAAKa,MAAMH,OAAS,EAAE,CAC9C,IAAMI,EAAS,CAAEC,KAAM,gBACvBC,QAAShB,EAAKa,MAAMH,OAEpBV,EAAKD,MAAMkB,SAASH,GACpBd,EAAKD,MAAMmB,QAAQC,KAAK,YAExBC,MAAM,8BAnBVpB,EAAKa,MAAQ,CACTH,OAAQ,GAHEV,wEA0Bd,OACIqB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,oDACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOR,KAAK,SAASS,YAAY,iBAC1BC,SAAUtB,KAAK6B,aAC1BX,EAAAC,EAAAC,cAAA,UAAQG,QAASvB,KAAKS,UAAtB,gBAlCQe,aAwCTC,gBAAUG,GCxCnBE,cACF,SAAAA,EAAYlC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8B,IACdjC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgC,GAAA3B,KAAAH,KAAMJ,KAMVmC,WAAa,SAAC1B,GACVR,EAAKS,SAAS,CACV0B,QAAS3B,EAAMG,OAAOD,SATZV,EAalBoC,aAAe,WACX,IAAMtB,EAAS,CAAEC,KAAM,eACvBC,QAAShB,EAAKa,MAAMsB,SAEpBnC,EAAKD,MAAMkB,SAASH,IAfpBd,EAAKa,MAAQ,CACTsB,QAAS,IAHCnC,wEAqBd,OACIqB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,sCAEAF,EAAAC,EAAAC,cAAA,SAAOR,KAAK,OAAOU,SAAUtB,KAAK+B,aAClCb,EAAAC,EAAAC,cAAA,UAAQG,QAASvB,KAAKiC,cAAtB,iBA3BOT,aAkCRC,gBAAUK,GClCnBI,mLAEE,OACIhB,EAAAC,EAAAC,cAAA,mBAHQI,aAULC,gBAAUS,oCCRnBC,cACF,SAAAA,EAAYvC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmC,IACdtC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqC,GAAAhC,KAAAH,KAAMJ,KAQVwC,SAAW,WACP,MAA4C,QAAzCvC,EAAKD,MAAMmB,QAAQsB,SAASC,SACpBpB,EAAAC,EAAAC,cAAA,UAAQG,QAAS1B,EAAK0C,cAAtB,UAGArB,EAAAC,EAAAC,cAAA,UAAQoB,UAAU,GAAlB,eAdG3C,EAkBlB0C,aAAe,WACXE,QAAQC,IAAR5C,OAAA6C,EAAA,EAAA7C,QAAA6C,EAAA,EAAA7C,CAAAD,KACA,IAAI+C,EAAiB/C,EAAKD,MAAMiD,WAChCJ,QAAQC,IAAIE,GAEZE,IAAM,CACFC,OAAQ,OACRC,IAAK,YACLC,KAAML,IACPM,KAAK,SAACC,GACLV,QAAQC,IAAIS,GACZtD,EAAKD,MAAMmB,QAAQC,KAAK,mBACzBoC,MAAM,SAACC,GACNZ,QAAQC,IAAIW,MA7BhBxD,EAAKa,MAAQ,CACT0B,UAAU,GAGdvC,EAAK0C,aAAe1C,EAAK0C,aAAae,KAAlBxD,OAAA6C,EAAA,EAAA7C,QAAA6C,EAAA,EAAA7C,CAAAD,KANNA,wEAoCd,OACIqB,EAAAC,EAAAC,cAAA,OAAKmC,UAAU,eACXrC,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,mCAEJF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,sBAAcpB,KAAKJ,MAAMiD,WAAWW,SACpCtC,EAAAC,EAAAC,cAAA,2BAAmBpB,KAAKJ,MAAMiD,WAAWY,eACzCvC,EAAAC,EAAAC,cAAA,qBAAapB,KAAKJ,MAAMiD,WAAWa,WACnCxC,EAAAC,EAAAC,cAAA,sBAAcpB,KAAKJ,MAAMiD,WAAWc,UAEpCzC,EAAAC,EAAAC,cAAA,WACCpB,KAAKoC,mBAjDDZ,aAyDNC,cAFc,SAACoB,GAAD,MAAiB,CAACA,WAAYA,IAE5CpB,CAA8BU,GC3DvCyB,6MAEFC,YAAc,WAGVhE,EAAKD,MAAMkB,SAFI,CAAEF,KAAM,mBAGvBf,EAAKD,MAAMmB,QAAQC,KAAK,+EAGxB,OACIE,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQG,QAASvB,KAAK6D,aAAtB,8BAbWrC,aAmBZC,gBAAUmC,GCqBVE,mLA5BX,OACE5C,EAAAC,EAAAC,cAAA,OAAKmC,UAAU,OACbrC,EAAAC,EAAAC,cAAA,UAAQmC,UAAU,cAChBrC,EAAAC,EAAAC,cAAA,MAAImC,UAAU,aAAd,aACArC,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,+BAENF,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,KACE7C,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAUC,KAAK,IAAIC,GAAG,OACtBhD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,KAAKC,UAAW3E,IAClCuB,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,MAAMC,UAAW5C,IACnCR,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,MAAMC,UAAW1C,IACnCV,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,MAAMC,UAAWxC,IACnCZ,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,gBAAgBC,UAAWV,IAC7C1C,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAWpC,IAEtChB,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,gBAAgBC,UAAWnC,cArBvCX,aCHZ+C,EAAcC,QACW,cAA7BC,OAAOpC,SAASqC,UAEe,UAA7BD,OAAOpC,SAASqC,UAEhBD,OAAOpC,SAASqC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACT3B,KAAK,SAAA+B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBzE,QACfoE,UAAUC,cAAcO,WAK1B7C,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBU,MAAM,SAAAC,GACLZ,QAAQY,MAAM,4CAA6CA,kCCpE3DkC,EAAe,CAID5B,SAAU,IAsBxB6B,EAAgBC,YApBE,WAAkC,IAAjC/E,EAAiCgF,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBH,EAAc5E,EAAW+E,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAEtD,MAAmB,gBAAhBjF,EAAOC,KACCd,OAAA+F,EAAA,EAAA/F,CAAA,GAAIY,EAAX,CAAkB8C,QAAS7C,EAAOE,UAEd,sBAAhBF,EAAOC,KACJd,OAAA+F,EAAA,EAAA/F,CAAA,GAAIY,EAAX,CAAkB+C,cAAe9C,EAAOE,UAEpB,kBAAhBF,EAAOC,KACJd,OAAA+F,EAAA,EAAA/F,CAAA,GAAIY,EAAX,CAAkBgD,UAAW/C,EAAOE,UAEhB,iBAAhBF,EAAOC,KACJd,OAAA+F,EAAA,EAAA/F,CAAA,GAAIY,EAAX,CAAkBiD,SAAUhD,EAAOE,UACd,mBAAhBF,EAAOC,KACL,CAAE+C,SAAU,IAGhBjD,GAKPoF,YAAgBC,MAGpBC,IAASC,OAAO/E,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAUC,MAAOX,GAAetE,EAAAC,EAAAC,cAACgF,EAAD,OAAoBC,SAASC,eAAe,SDtB7E,WACb,GAA6C,kBAAmBxB,UAAW,CAGzE,GADkB,IAAIyB,IAAIC,GAAwB/B,OAAOpC,UAC3CoE,SAAWhC,OAAOpC,SAASoE,OAIvC,OAGFhC,OAAOiC,iBAAiB,OAAQ,WAC9B,IAAM7B,EAAK,GAAA8B,OAAMH,GAAN,sBAEPjC,GAiDV,SAAiCM,GAE/B+B,MAAM/B,GACH3B,KAAK,SAAAC,GAGkB,MAApBA,EAAS0D,SACuD,IAAhE1D,EAAS2D,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7ClC,UAAUC,cAAckC,MAAM/D,KAAK,SAAA+B,GACjCA,EAAaiC,aAAahE,KAAK,WAC7BuB,OAAOpC,SAAS8E,aAKpBvC,EAAgBC,KAGnBzB,MAAM,WACLX,QAAQC,IACN,mEArEA0E,CAAwBvC,GAIxBC,UAAUC,cAAckC,MAAM/D,KAAK,WACjCT,QAAQC,IACN,+GAMJkC,EAAgBC,MCLxBwC","file":"static/js/main.77e5f558.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass Feeling extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            value: -1,\n        }\n    }\n\n    setFeeling = (event) => {\n        this.setState({\n            value: event.target.value,\n        })\n    }\n\n    nextPage = () => {\n        if(this.state.value >= 1 && this.state.value <= 5){\n            const action = { type: 'SET_FEELING',\n            payload: this.state.value,\n            };\n            this.props.dispatch(action);\n            this.props.history.push('/p2');\n        }else{\n            alert('Please enter a number 1-5');\n        }\n    }\n\n    render(){\n        return(\n            <div>\n                <h3>Rate how you're feeling (1-5)</h3>\n                <br />\n                <br />\n                    <input type=\"number\" placeholder=\"feeling rating\" \n                           onChange={this.setFeeling} /> \n                <button onClick={this.nextPage}>Next</button>\n            </div>\n        );\n    }\n}\n\nexport default connect()(Feeling);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass Understanding extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            value: -1,\n        }\n    }\n\n    setUnderstanding = (event) => {\n        this.setState({\n            value: event.target.value,\n        })\n    }\n\n    nextPage = () => {\n        if(this.state.value >= 1 && this.state.value <= 5){\n            const action = { type: 'SET_UNDERSTANDING',\n            payload: this.state.value,\n            };\n            this.props.dispatch(action);\n            this.props.history.push('/p3');\n        }else{\n            alert('Please enter a number 1-5');\n        }\n    }\n\n    render(){\n        return(\n            <div>\n                <h3>Rate how much you understand the material (1-5)</h3>\n                <br />\n                <br />\n                    <input type=\"number\" placeholder=\"understanding rating\" \n                           onChange={this.setUnderstanding} /> \n                <button onClick={this.nextPage}>Next</button>\n            </div>\n        );\n    }\n}\n\nexport default connect()(Understanding);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass Supported extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            value: -1,\n        }\n    }\n\n    setSupport = (event) => {\n        this.setState({\n            value: event.target.value,\n        })\n    }\n\n    nextPage = () => {\n        if(this.state.value >= 1 && this.state.value <= 5){\n            const action = { type: 'SET_SUPPORTED',\n            payload: this.state.value,\n            };\n            this.props.dispatch(action);\n            this.props.history.push('/p4');\n        }else{\n            alert('Please enter a number 1-5');\n        }\n    }\n\n    render(){\n        return(\n            <div>\n                <h3>Rate how much you feel supported (1-5)</h3>\n                <br />\n                <br />\n                    <input type=\"number\" placeholder=\"support rating\" \n                           onChange={this.setSupport} /> \n                <button onClick={this.nextPage}>Next</button>\n            </div>\n        );\n    }\n}\n\nexport default connect()(Supported);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass Comments extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            comment: '',\n        }\n    }\n\n    setComment = (event) => {\n        this.setState({\n            comment: event.target.value,\n        });\n    }\n\n    enterComment = () => {\n        const action = { type: 'SET_COMMENTS',\n        payload: this.state.comment,\n        };\n        this.props.dispatch(action);\n    }\n\n    render(){\n        return(\n            <div>\n                <h3>Any Comments? (optional)</h3>\n\n                <input type='text' onChange={this.setComment} />\n                <button onClick={this.enterComment}>Enter</button>\n\n            </div>\n        );\n    }\n}\n\nexport default connect()(Comments);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass Admin extends Component{\n    render(){\n        return(\n            <div>\n\n            </div>\n        );\n    }\n}\n\nexport default connect()(Admin);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './Review.css';\nimport axios from 'axios';\n\nclass Review extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            complete: true,\n        }\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    complete = () => {\n        if(this.props.history.location.pathname === '/p4'){\n            return <button onClick={this.handleSubmit} >Submit</button>\n        }\n        else{\n            return <button disabled={true}>Incomplete</button>\n        }\n    }\n\n    handleSubmit = () => {\n        console.log(this);\n        let feedbackToSend = this.props.reduxStore;\n        console.log(feedbackToSend);\n\n        axios({\n            method: 'POST',\n            url: '/feedback',\n            data: feedbackToSend,\n        }).then((response) => {\n            console.log(response);\n            this.props.history.push('/confirmation')\n        }).catch((error) => {\n            console.log(error);\n        });\n    }\n\n    render(){\n        return(\n            <div className='reviewBlock'>\n                <header>\n                    <h3>Review Your Feedback</h3>\n                </header>\n                <br />\n                <p>Feelings: {this.props.reduxStore.feeling}</p>\n                <p>Understanding: {this.props.reduxStore.understanding}</p>\n                <p>Support: {this.props.reduxStore.supported}</p>\n                <p>Comments: {this.props.reduxStore.comments}</p>\n\n                <br />\n                {this.complete()}\n            </div>\n        );\n    }\n}\n\nconst mapReduxStoreToProps = (reduxStore) => ({reduxStore: reduxStore});\n\nexport default connect(mapReduxStoreToProps)(Review);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass Confirmation extends Component{\n\n    newFeedback = () => {\n        const action = { type: 'RESET_FEEDBACK',\n        };\n        this.props.dispatch(action);\n        this.props.history.push('/p');\n    }\n    render(){\n        return(\n            <div>\n                <h1>Feedback Sent!</h1>\n                <br />\n                <button onClick={this.newFeedback}>Leave New Feedback</button>\n            </div>\n        );\n    }\n}\n\nexport default connect()(Confirmation);","import React, { Component } from 'react';\nimport './App.css';\nimport { HashRouter as Router, Route, Redirect,} from 'react-router-dom';\n\n//My components\nimport Feeling from '../Feeling/Feeling.js';\nimport Understanding from '../Understanding/Understanding.js';\nimport Supported from '../Supported/Supported.js';\nimport Comments from '../Comments/Comments.js';\nimport Admin from '../Admin/Admin.js';\nimport Review from '../Review/Review.js';\nimport Confirmation from '../Confirmation/Confirmation.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Feedback!</h1>\n          <h4><i>Don't forget it!</i></h4>\n        </header>\n        <br/>\n\n        <Router>\n          <div>\n\n            <Redirect from=\"/\" to=\"/p\" />\n            <Route exact path=\"/p\" component={Feeling} />\n            <Route exact path=\"/p2\" component={Understanding} />\n            <Route exact path=\"/p3\" component={Supported} />\n            <Route exact path=\"/p4\" component={Comments} />\n            <Route exact path=\"/confirmation\" component={Confirmation} />\n            <Route exact path=\"/admin\" component={Admin} />\n\n            <Route exact path=\"/(p|p2|p3|p4)\" component={Review} />\n\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport registerServiceWorker from './registerServiceWorker';\n\n//import Redux\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport logger from 'redux-logger';\n\nconst defaultState = {\n                    //state will also include feeling(number)\n                    //                        understanding(number)\n                    //                        supported(number)\n                    comments: '',\n};\nconst feedbackReducer = (state = defaultState, action) => {\n\n    if(action.type === 'SET_FEELING'){\n        return {...state, feeling: action.payload}\n    }\n    else if(action.type === 'SET_UNDERSTANDING'){\n        return {...state, understanding: action.payload}\n    }\n    else if(action.type === 'SET_SUPPORTED'){\n        return {...state, supported: action.payload}\n    }\n    else if(action.type === 'SET_COMMENTS'){\n        return {...state, comments: action.payload}\n    }else if(action.type === 'RESET_FEEDBACK'){\n        return { comments: ''};\n    }\n\n    return state;\n}\n\nconst storeInstance = createStore(\n    feedbackReducer,\n    applyMiddleware(logger),\n);\n\nReactDOM.render(<Provider store={storeInstance}><App /></Provider>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}